// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float> _p;

StructuredBuffer<float> _u;
StructuredBuffer<float> _v;

int _N;

int IX(int i, int j)
{
	return i + (_N + 2) * j;
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int index = IX(id.x, id.y);
	int indexLeft = IX(id.x - 1, id.y);
	int indexRight = IX(id.x + 1, id.y);
	int indexUp = IX(id.x, id.y + 1);
	int indexDown = IX(id.x, id.y - 1);

	float h;
	h = 1. / (float) _N;
	float div = -0.5 * h * (_u[indexRight] - _u[indexLeft] + _v[indexUp] - _v[indexDown]);
	if ((id.x + id.y) % 2 == 0) {
		_p[index] = (div + _p[indexLeft] + _p[indexRight] + _p[indexDown] + _p[indexUp]) / 4.;
	}
	AllMemoryBarrier();
	if ((id.x + id.y) % 2 == 1) {
		_p[index] = (div + _p[indexLeft] + _p[indexRight] + _p[indexDown] + _p[indexUp]) / 4.;
	}
	AllMemoryBarrier();
}
